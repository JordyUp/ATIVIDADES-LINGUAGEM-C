LISTA UFBA, LINGUAGEM C, JORDYSON CRUZ.

// Escreva um programa que receba uma lista de 10 inteiros via teclado e 
imprima todo a lista em na mesma linha.


#include <stdio.h>

int main()
{
    int valor[10];
    
    for (int i = 0; i < 10; i++){
        printf("Insira o valor: \n");
        scanf("%d", &valor[i]);
        
    }
    for (int i = 0; i < 10; i++){
    printf("%d", valor[i]);
}
    return 0;
}

// Escreva um programa que receba uma listade de 10 inteiros via teclado, em 
seguida o programa deve solicitar um número e informar se o número 
também está na lista ou não.

#include <stdio.h>

int main() {
    int valor[10];
    int identificador;
    int encontrado = 0;

    for (int i = 0; i < 10; i++) {
        printf("Insira o valor %d: ", i + 1);
        scanf("%d", &valor[i]);
    }

    printf("Digite um número e veja se está na lista: ");
    scanf("%d", &identificador);

    for (int i = 0; i < 10; i++) {
        if (identificador == valor[i]) {
            encontrado = 1;
            break;
        }
    }

    if (encontrado) {
        printf("Sim, esse número está na lista!\n");
    } else {
        printf("Esse número não está na lista!\n");
    }

    return 0;
}

// Escreva um programa que leia 10 números de reais e informe:
a) a média dos elementos;
b) o maior e menor elemento;
c) a quantidade de elementos positivos e a quantidade de elementos 
negativos

#include <stdio.h>

int main() {
    int num;
    int maior_num = 0;
    int menor_num = 0;
    int negativos_num = 0;
    int positivos_num = 0;
    int total_num = 0;
    
    for (int i = 0; i < 10; i++){
        printf("Insira numeros reais: (0 encerra o programa)\n");
        scanf("%d", &num);
        if (num == 0){
            break;
        }
        total_num += num;
        
        if (num > maior_num){
            maior_num = num;
        }
        if (num < menor_num){
            menor_num = num;
        }
        if (num < 0){
            negativos_num++;
        }
        if (num > 0){
            positivos_num++;
        }
    }
    
    float media_num = (float)total_num /10;
    
    printf("a media de elementos é: %.2f\n", media_num);
    printf("O maior numero é: %d, O menor numero é: %d\n", maior_num, menor_num);
    printf("A quantidade de elementos positivos é: %d, e negativos é: %d\n", positivos_num, negativos_num);
    
    return 0;
}

// Escreva um programa que [Entrada]: receba do usuário: 1) o valor base de 
indenização por um plano de saúde; 2) a idade do paciente indenizado e; 3) o 
nome completo do paciente.
 [Processamento]: Seu programa deve calcular o 
reajuste de indenização sobre o valor base de acordo com a idade do paciente. 
Seu programa deve aumentar o valor da indenização em: 30% se o paciente tiver
até 12 anos; 10% se o paciente tiver idade entre 13 e 49 anos (inclusive); 15% 
se o paciente tiver idade entre 50 e 65 anos (inclusive) e; 35% se o paciente tiver 
idade acima de 65 anos.
 [Saída]: AO FINAL, SOMENTE AO FINAL, Seu 
programe deve mostrar (um paciente por linha): o nome do paciente, a idade do 
paciente e qual foi o valor da indenização reajustado. Obs: o usuário deve fazer 
esse procedimento para quantos clientes ELE QUISER. Dica: voce PODE usar 
três vetores: um para os nomes, outro para as idades e outro para as 
indenizações reajustadas 

#include <stdio.h>
#include <string.h>

int main() {
    char nomes[100][100];
    int idades[100];
    float indenizacoes_reajustadas[100];
    int i = 0;

    while (1) {

        printf("Digite o nome do paciente (ou digite 'sair' para encerrar):\n ");
        scanf("%s", nomes[i]);

        if (strcmp(nomes[i], "sair") == 0) {
            break;
        }

        printf("Digite a idade do paciente: \n");
        scanf("%d", &idades[i]);

        printf("Digite o valor base de indenização: \n");
        scanf("%f", &indenizacoes_reajustadas[i]);

        float reajuste;
        if (idades[i] <= 12) {
            reajuste = 0.3;
        } else if (idades[i] >= 13 && idades[i] <= 49) {
            reajuste = 0.1;
        } else if (idades[i] >= 50 && idades[i] <= 65) {
            reajuste = 0.15;
        } else {
            reajuste = 0.35;
        }

        indenizacoes_reajustadas[i] = indenizacoes_reajustadas[i] * (1 + reajuste);
        i++;
    }

    printf("Resultados:\n");
    for (int j = 0; j < i; j++) {
        printf("Nome: %s, Idade: %d, Indenização Reajustada: R$%.2f\n", nomes[j], idades[j], indenizacoes_reajustadas[j]);
    }

    return 0;
}

// Escreva um programa que leia três vetores do mesmo tamanho (N) e:
a) calcule a norma de cada um dos vetores, informe qual vetor tem a maior 
norma1;
b) calcule o vetor soma dos três vetores2

#include <stdio.h>
#include <math.h>

int main() {
    int N;

    printf("Digite o tamanho dos vetores: ");
    scanf("%d", &N);

    double vetor1[N], vetor2[N], vetor3[N];

 
    printf("Digite os elementos do primeiro vetor:\n");
    for (int i = 0; i < N; i++) {
        scanf("%lf", &vetor1[i]);
    }

    printf("Digite os elementos do segundo vetor:\n");
    for (int i = 0; i < N; i++) {
        scanf("%lf", &vetor2[i]);
    }

    printf("Digite os elementos do terceiro vetor:\n");
    for (int i = 0; i < N; i++) {
        scanf("%lf", &vetor3[i]);
    }

    double norma1 = 0, norma2 = 0, norma3 = 0;
    int vetor_maior_norma = 1;

    for (int i = 0; i < N; i++) {
        norma1 += vetor1[i] * vetor1[i];
        norma2 += vetor2[i] * vetor2[i];
        norma3 += vetor3[i] * vetor3[i];
    }

    norma1 = sqrt(norma1);
    norma2 = sqrt(norma2);
    norma3 = sqrt(norma3);

    if (norma2 > norma1 && norma2 > norma3) {
        vetor_maior_norma = 2;
    } else if (norma3 > norma1 && norma3 > norma2) {
        vetor_maior_norma = 3;
    }

    printf("A norma do primeiro vetor é: %lf\n", norma1);
    printf("A norma do segundo vetor é: %lf\n", norma2);
    printf("A norma do terceiro vetor é: %lf\n", norma3);
    printf("O vetor com a maior norma é o vetor %d\n", vetor_maior_norma);

    double vetor_soma[N];

    for (int i = 0; i < N; i++) {
        vetor_soma[i] = vetor1[i] + vetor2[i] + vetor3[i];
    }

    printf("Vetor Soma dos três vetores:\n");
    for (int i = 0; i < N; i++) {
        printf("%lf ", vetor_soma[i]);
    }

    return 0;
}

//  Escreva um programa que faça um cadastro de clientes. Seu programa deve 
[Entrada]: receber os seguintes dados do usuário: 1) o nome completo; 2) o RG 
do cliente; 3) o CPF e; 4) o telefone do cliente. [Processamento]: Seu programa 
deve armazenar todos os dados em uma ÚNICA LISTA. [Saída]: AO FINAL, 
SOMENTE AO FINAL, Seu programe deve mostrar (um cliente por linha): a) o 
nome completo do paciente, b) O RG; c) o CPF e; d) o telefone do cliente. Obs:
o usuário deve fazer esse procedimento para quantos clientes ELE QUISER. 


#include <string.h>

int main() {
    char nomes[100][100];
    char rg[100][20];
    char cpf[100][20];
    char telefone[100][20];
    int num_clientes = 0;

    printf("Cadastro de Clientes:\n");

    while (1) {
        printf("Digite o nome do cliente (ou digite 'sair' para encerrar): ");
        scanf(" %99[^\n]", nomes[num_clientes]);

        if (strcmp(nomes[num_clientes], "sair") == 0) {
            break;
        }

        printf("Digite o RG do cliente: ");
        scanf(" %19[^\n]", rg[num_clientes]);

        printf("Digite o CPF do cliente: ");
        scanf(" %19[^\n]", cpf[num_clientes]);

        printf("Digite o telefone do cliente: ");
        scanf(" %19[^\n]", telefone[num_clientes]);

        num_clientes++;
    }

    printf("Cadastro de Clientes:\n");
    for (int i = 0; i < num_clientes; i++) {
        printf("Cliente %d:\n", i + 1);
        printf("Nome: %s\n", nomes[i]);
        printf("RG: %s\n", rg[i]);
        printf("CPF: %s\n", cpf[i]);
        printf("Telefone: %s\n", telefone[i]);
        printf("\n");
    }

    return 0;
}

// Escreva um programa que leia e mostre uma lista de 10 elementos inteiros. 
Em seguida, conte quantos valores pares existem na lista, por fim, exiba a 
quantidade na tela

#include <stdio.h>

int main() {
    int lista[10];
    int quantidadePares = 0;

    printf("Digite 10 elementos inteiros:\n");
    for (int i = 0; i < 10; i++) {
        printf("Elemento %d: ", i + 1);
        scanf("%d", &lista[i]);
    }

    for (int i = 0; i < 10; i++) {
        if (lista[i] % 2 == 0) {
            quantidadePares++;
        }
    }

    printf("A quantidade de valores pares na lista é: %d\n", quantidadePares);

    return 0;
}

//  Elaborar um programa que lê um conjunto de vários valores inteiros e os 
coloca em 2 listas conforme forem pares ou ímpares (uma lista para números
pares e outra lista para números ímpares). O tamanho da lista é de 5 
posições. Quando alguma lista estiver cheia, ela deverá ser exibida na tela. 
Cada lista poderá ser preenchida tantas vezes quantas forem necessárias. 
Caso a leitura seja finalizada sem o preenchimento completo de alguma das
lista, as listas deverão ser exibidas na tela.

#include <stdio.h>

#define TAMANHO_LISTA 5

void exibirLista(int lista[], int tamanho, char tipo[]) {
    printf("\nLista de números %s:\n", tipo);
    for (int i = 0; i < tamanho; i++) {
        printf("%d ", lista[i]);
    }
    printf("\n");
}

int main() {
    int listaPares[TAMANHO_LISTA];
    int listaImpares[TAMANHO_LISTA];
    int valor;
    int contPares = 0, contImpares = 0;

    while (1) {
        printf("Digite um valor inteiro (ou -1 para encerrar): ");
        scanf("%d", &valor);

        if (valor == -1) {
            break;
        }

        if (valor % 2 == 0) {

            if (contPares < TAMANHO_LISTA) {
                listaPares[contPares++] = valor;
            } else {
                exibirLista(listaPares, TAMANHO_LISTA, "pares");
                contPares = 0;
                listaPares[contPares++] = valor;
            }
        } else {

            if (contImpares < TAMANHO_LISTA) {
                listaImpares[contImpares++] = valor;
            } else {
                exibirLista(listaImpares, TAMANHO_LISTA, "ímpares");
                contImpares = 0;
                listaImpares[contImpares++] = valor;
            }
        }
    }

    if (contPares > 0) {
        exibirLista(listaPares, contPares, "pares");
    }

    if (contImpares > 0) {
        exibirLista(listaImpares, contImpares, "ímpares");
    }

    return 0;
}

// Escreva um programa que leia uma lista G de 20 elementos caractere que 
representa o gabarito de uma prova com 20 questões. A seguir, para cada 
um dos 50 alunos de uma turma, leia o nome e o vetor de respostas (R) do 
aluno, após ler conte o número de acertos desse aluno e mostre o numero 
de acertos e uma mensagem APROVADO, se a nota FINAL for maior ou igual 
a 6 ou mostre o numeros de acertos e uma mensagem de REPROVADO, 
caso contrário. Cada questão correta vale 0,5 ponto.

#include <stdio.h>
#include <string.h>

#define TAMANHO_GABARITO 20
#define TAMANHO_NOME 50
#define NUM_ALUNOS 50

float calcularNota(char gabarito[], char respostas[]) {
    float nota = 0.0;
    for (int i = 0; i < TAMANHO_GABARITO; i++) {
        if (gabarito[i] == respostas[i]) {
            nota += 0.5;  // Cada questão correta vale 0,5 ponto
        }
    }
    return nota;
}

//Escreva um programa que leia uma lista G de 20 elementos caractere que 
representa o gabarito de uma prova com 20 questões. A seguir, para cada 
um dos 50 alunos de uma turma, leia o nome e o vetor de respostas (R) do 
aluno, após ler conte o número de acertos desse aluno e mostre o numero 
de acertos e uma mensagem APROVADO, se a nota FINAL for maior ou igual 
a 6 ou mostre o numeros de acertos e uma mensagem de REPROVADO, 
caso contrário. Cada questão correta vale 0,5 ponto.


int main() {
    char gabarito[TAMANHO_GABARITO + 1];  // +1 para o caractere nulo
    char nome[TAMANHO_NOME];
    char respostas[TAMANHO_GABARITO + 1];  
    float nota;

    printf("Digite o gabarito da prova (20 caracteres): ");
    scanf("%s", gabarito);

    for (int i = 0; i < NUM_ALUNOS; i++) {
        printf("\nDigite o nome do aluno %d: ", i + 1);
        scanf("%s", nome);

        printf("Digite as respostas do aluno %s: ", nome);
        scanf("%s", respostas);

        nota = calcularNota(gabarito, respostas);

        printf("\nNúmero de acertos para o aluno %s: %.1f\n", nome, nota);

        if (nota >= 6.0) {
            printf("APROVADO\n");
        } else {
            printf("REPROVADO\n");
        }
    }

    return 0;
}

// Escreva um programa que leia uma lista G de 20 elementos caractere que 
representa o gabarito de uma prova com 20 questões. A seguir, para cada 
um dos 50 alunos de uma turma, leia o nome e o vetor de respostas (R) do 
aluno, após ler conte o número de acertos e ARMAZENE o nome e a NOTA 
FINAL desse aluno. APÓS processar a contagem para os 50 alunos, mostre 
o nome do aluno e a NOTA FINAL seguida da mensagem APROVADO, se a 
nota FINAL for maior ou igual a 6 ou seguida da mensagem REPROVADO, 
caso contrário. Cada questão correta vale 0,5 ponto.

#include <stdio.h>
#include <string.h>

#define TAMANHO_GABARITO 20
#define TAMANHO_NOME 50
#define NUM_ALUNOS 50

float calcularNota(char gabarito[], char respostas[]) {
    float nota = 0.0;
    for (int i = 0; i < TAMANHO_GABARITO; i++) {
        if (gabarito[i] == respostas[i]) {
            nota += 0.5;  // Cada questão correta vale 0,5 ponto
        }
    }
    return nota;
}

int main() {
    char gabarito[TAMANHO_GABARITO + 1];  // +1 para o caractere nulo
    char nome[TAMANHO_NOME];
    char respostas[TAMANHO_GABARITO + 1];  // +1 para o caractere nulo
    float nota;
    float notasFinais[NUM_ALUNOS];
    char nomesAlunos[NUM_ALUNOS][TAMANHO_NOME];

    printf("Digite o gabarito da prova (20 caracteres): ");
    scanf("%s", gabarito);

    for (int i = 0; i < NUM_ALUNOS; i++) {
        printf("\nDigite o nome do aluno %d: ", i + 1);
        scanf("%s", nome);

        printf("Digite as respostas do aluno %s: ", nome);
        scanf("%s", respostas);

        nota = calcularNota(gabarito, respostas);
        notasFinais[i] = nota;
        strcpy(nomesAlunos[i], nome);
    }

    printf("\nResultados:\n");

    for (int i = 0; i < NUM_ALUNOS; i++) {
        printf("\nNome: %s\n", nomesAlunos[i]);
        printf("Nota Final: %.1f\n", notasFinais[i]);

        if (notasFinais[i] >= 6.0) {
            printf("APROVADO\n");
        } else {
            printf("REPROVADO\n");
        }
    }

    return 0;
}

// Faça um programa que leia um código numérico inteiro e uma lista de 15 
posições de números reais. Se o código for zero, termine o programa. Se o 
código for 1, mostre a lista na ordem direta. Se o código for 2, mostre a lista
na ordem inversa.

#include <stdio.h>

int main() {
    int codigo;
    float lista[15];

    printf("Digite um código numérico inteiro (0 para encerrar, 1 para ordem direta, 2 para ordem inversa): ");
    scanf("%d", &codigo);

    while (codigo != 0) {
        printf("Digite 15 números reais:\n");

        for (int i = 0; i < 15; i++) {
            scanf("%f", &lista[i]);
        }

        if (codigo == 1) {
            printf("Lista na ordem direta:\n");
            for (int i = 0; i < 15; i++) {
                printf("%.2f ", lista[i]);
            }
        } else if (codigo == 2) {
            printf("Lista na ordem inversa:\n");
            for (int i = 14; i >= 0; i--) {
                printf("%.2f ", lista[i]);
            }
        } else {
            printf("Código inválido.\n");
        }

        printf("\nDigite um novo código numérico inteiro (0 para encerrar, 1 para ordem direta, 2 para ordem inversa): ");
        scanf("%d", &codigo);
    }

    printf("Programa encerrado.\n");

    return 0;
}

// Construa um programa que leia dois números inteiros a e b, uma lista de 
tamanho N e exiba como resposta a contagem de quantos elementos do 
vetor estão no intervalo fechado [a; b]

#include <stdio.h>

int main() {
    int a, b, N;

    printf("Digite dois números inteiros a e b (onde a <= b): ");
    scanf("%d %d", &a, &b);

    if (a > b) {
        printf("Erro: a deve ser menor ou igual a b.\n");
        return 1; // Retorna código de erro
    }

    printf("Digite o tamanho N da lista: ");
    scanf("%d", &N);

    int lista[N];

    printf("Digite %d números inteiros:\n", N);
    for (int i = 0; i < N; i++) {
        scanf("%d", &lista[i]);
    }

    int contagem = 0;

    for (int i = 0; i < N; i++) {
        if (lista[i] >= a && lista[i] <= b) {
            contagem++;
        }
    }

    printf("A quantidade de elementos no intervalo [%d, %d] é: %d\n", a, b, contagem);

    return 0;
}